program = _{ SOI ~ item* ~ EOI }
item    = _{ let_stmt }

statement = _{ let_stmt | ret_stmt | set_stmt }
let_stmt  =  { "let" ~ ident ~ "=" ~ expr ~ ";" }
set_stmt  =  { ident ~ "=" ~ expr ~ ";" }
ret_stmt  =  { "return" ~ expr ~ ";" }

ident = @{ !KEYWORDS ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// pratt parser
expr    =  { prefix? ~ primary ~ postfix? ~ (infix ~ prefix? ~ primary ~ postfix?)* }
infix   = _{ add | sub | mul | div }
add     =  { "+" }
sub     =  { "-" }
mul     =  { "*" }
div     =  { "/" }
prefix  = _{ neg }
neg     =  { "-" }
postfix = _{ call }
call    =  { "(" ~ (expr ~ ("," ~ expr)* ~ ","?)? ~ ")" }
primary = _{ "(" ~ expr ~ ")" | fn | literal | ident }

fn    = { "fn" ~ args ~ block }
args  = { "(" ~ ")" | "(" ~ ident ~ ("," ~ ident)* ~ ","? ~ ")" }
block = { "{" ~ statement* ~ expr? ~ "}" }

literal = _{ number | boolean }
boolean =  { "true" | "false" }
number  = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

WHITESPACE = _{ " " | "\r\n" | "\n" }
KEYWORDS   =  { "fn" | "true" | "false" | "let" | "return" | "if" | "else" }
